--[[ 
    Tree Placement System (Client Script)
    Author: nhrneghqrg52
    Description: Handles both PC and Mobile tree placement logic, including 
    ghost visualization, rotation, UI toggling, and communication with the server.
    Demonstrates knowledge of Roblox APIs such as UserInputService, RunService, 
    TweenService, ReplicatedStorage communication, and CFrame transformations.
]]

--// Services
local replicatedStorage = game:GetService("ReplicatedStorage") -- Stores shared assets and remote events
local remotes = replicatedStorage.Remotes -- Folder containing RemoteEvents and RemoteFunctions
local UserInputService = game:GetService("UserInputService") -- Used to detect player input
local runService = game:GetService("RunService") -- Used for frame-based updates (RenderStepped)
local Players = game:GetService("Players") -- Provides access to the player list
local player = Players.LocalPlayer -- The current client player
local tweenService = game:GetService("TweenService") -- Used to create smooth transitions (tweens)
local starterGui = player:WaitForChild("PlayerGui") -- The playerâ€™s GUI hierarchy
local Helpers = require(script:WaitForChild("Helper Functions")) -- Module containing shared utility functions

--// Remote Events
local placeTreeEvent = remotes.PlaceTree -- RemoteEvent used to request the server to place a tree

--// UI References
local PlaceBTN : TextButton = starterGui:WaitForChild("PlacementUI"):WaitForChild("Place Tree"):WaitForChild("Place Tree BTN") -- Main button to start planting
local treeModels : Folder = replicatedStorage:WaitForChild("TreeModels") -- Folder containing tree model templates

--// Core State Variables
local activePlantMode = false -- Tracks whether planting mode is active
local currentGhost = nil -- Reference to the currently visible ghost tree model
local isPlacing = false -- Prevents overlapping placement attempts
local SELECTED_TREE = nil -- Stores which tree is currently selected for placement
local cam = workspace.CurrentCamera -- Reference to the current camera
local activeConnections = {} -- Holds all active input/event connections for cleanup

--// UI Components (Mobile + PC)
local Arrows = starterGui:WaitForChild("PlacementUI"):WaitForChild("Mobile Placement"):WaitForChild("Arrows") -- Mobile arrow controls UI
local UpBtn : ImageButton = Arrows:WaitForChild("Frame"):WaitForChild("Up") -- Moves ghost tree upward in grid
local DownBtn : ImageButton = Arrows:WaitForChild("Frame"):WaitForChild("Down") -- Moves ghost tree downward in grid
local RightBtn : ImageButton = Arrows:WaitForChild("Frame"):WaitForChild("Right") -- Moves ghost tree right in grid
local LeftBtn : ImageButton = Arrows:WaitForChild("Frame"):WaitForChild("Left") -- Moves ghost tree left in grid
local Confirm : TextButton = Arrows:WaitForChild("Confirm") -- Confirms placement
local Cancel : TextButton  = Arrows:WaitForChild("Cancel") -- Cancels placement

local PCFrame : Frame = starterGui:WaitForChild("PlacementUI"):WaitForChild("PC Placement"):WaitForChild("Frame")
local TreeControls = PCFrame:WaitForChild("Tree Controls").UI -- PC-specific controls UI

--// Mobile State Variables
local mobileGhost = nil -- Holds the cloned ghost tree for mobile
local mobilePlotPosition = nil -- Current grid position on mobile (Vector2)
local mobileIsland = nil -- The island currently being planted on
local mobilePlotsByPos = {} -- Dictionary mapping Vector2 positions to plot parts
local mobileRotY = 0 -- Rotation angle for mobile placement
local ControlsFrameOpen = false -- Whether the controls UI is visible
local ArrowsTable = {UpBtn, DownBtn, RightBtn, LeftBtn} -- For easy iteration over arrow buttons

--// Detect platform (PC or Mobile)
local OnMobile, OnPc = Helpers.Init() -- Returns platform flags
